{
	// Place your snippets for nix here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Home-manager config": {
		"prefix": "home-manager",
		"body": [
			"home-manager.users.\\${user} = {",
			"$0",
			"};"
		]
	},
	"Home-manager packages": {
		"prefix": "home.packages",
		"body": [
			"home.packages = with pkgs; [",
			"$0",
			"];"
		]
	},
	"NixOS module": {
		"prefix": "nixos-module",
		"body": [
			"{ pkgs, directories, constants, extra-libs, ... }: let inherit (constants) user; inherit (extra-libs); in { imports = with directories.modules; []; home-manager.users.\\${user} = { home.packages = with pkgs; [ ]; }; home-manager.users.\\${user}.xdg.configFile.\"path/to/file\".text = ''''; }"
		]
	},
	"mkGlobalKeybind": {
		"prefix": "mkGlobalKeybind",
		"body": [
			"(mkGlobalKeybind {",
			"name = \"$1\";",
			"binding = \"$2\";",
			"command = \"$3\";",
			"})",
		]
	},
	"quickPatch": {
		"prefix": "quickPatch",
		"body": [
			"(quickPatch {",
			"package = \"$1\";",
			"patches = [ ./$2 ];",
			"})",
		]
	},
	"nixpkgs overlay": {
		"prefix": "overlay",
		"body": [
			"nixpkgs.overlays = [",
			"  (final: prev: {",
			"    $1 = prev.$1.overrideAttrs (",
			"      finalAttrs: oldAttrs: {",
			"        $0",
			"      }",
			"    );",
			"  })",
			"];",
		]
	},
	"nixos module options": {
		"prefix": "module options",
		"body": [
			"options.$1 = with lib; {",
			"  enable = mkOption {",
			"    type = types.bool;",
			"    default = false;",
			"  };",
			"  mode = mkOption {",
			"    type = types.enum [",
			"      \"option\"",
			"    ];",
			"    default = \"option\";",
			"    description = \"mode\";",
			"  };",
			"  path = mkOption {",
			"    type = types.path;",
			"  };",
			"  suboption = mkOption {",
			"    type = types.submodule {",
			"      options = {};",
			"    };",
			"  };",
			"};",
			"config = with lib; let cfg = config.$1; in mkIf cfg.enable {",
			"};",
		]
	}
}