

# The music library directory  
directory: /stuff/media/music
library: /stuff/media/music/beets.db

plugins: fetchart lyrics lastgenre embedart inline deezer spotify

# Indicating whether the autotagger should use multiple threads.
threaded: yes

ui:
  color: yes

import:
  write: yes
  move: yes
  autotag: yes
  resume: ask
  from_scratch: no
  duplicate_action: skip
  bell: yes

item_fields:
  is_not_single: 1 if disctotal > 1 or tracktotal > 1 else 0
  primary_album_artist: |
    import json
    import requests
    query_url="https://musicbrainz.org/ws/2/artist/{0}?inc=aliases&fmt=json".format(mb_albumartistid)
    try:
      primary_albumartist= requests.get(query_url).json()["sort-name"]
    except:
      if albumartist_sort:
        print("MusicBrainz lookup for primary albumartist failed! Falling back on local sort-name.")
        return albumartist_sort
      else:
        print("MusicBrainz lookup for primary albumartist failed, and local sort-name not found! Using local artist name as-is.")
        return albumartist
    else:
      return primary_albumartist
  primary_artist: |
    import json
    import requests
    query_url="https://musicbrainz.org/ws/2/artist/{0}?inc=aliases&fmt=json".format(mb_artistid)
    try:
      primary_artist= requests.get(query_url).json()["sort-name"]
    except:
      if artist_sort:
        print("MusicBrainz lookup for primary artist failed! Falling back on local sort-name.")
        return artist_sort
      else:
        print("MusicBrainz lookup for primary artist failed, and local sort-name not found! Using local artist name as-is.")
        return artist
    else:
      return primary_artist

# Directory and naming scheme.
# The aunique{} function ensures that identically-named albums are placed in different directories.
paths:
  default: artists/$primary_album_artist/%if{$is_not_single,$album ($year)%aunique{albumartist album year, albumtype label catalognum albumdisambig releasegroupdisambig}/$track - $title,$artist - $title}
  singleton: artists/$primary_artist/%if{$is_not_single,$album ($year)%aunique{albumartist album year, albumtype label catalognum albumdisambig releasegroupdisambig}/$track - $title,$artist - $title}
  albumtype:soundtrack: soundtracks/$album ($year)%aunique{albumartist album year, albumtype label catalognum albumdisambig releasegroupdisambig}/$track - $title
  comp: compilations/$album ($year)%aunique{albumartist album year, albumtype label catalognum albumdisambig releasegroupdisambig}/$track - $artist - $title
  
# When beets imports all the files in a directory, it tries to remove the directory if it’s empty.
# A directory is considered empty if it only contains files whose names match the glob patterns in clutter,
# which should be a list of strings.
# The importer only removes recursively searched subdirectories—the top-level directory you specify on the command line is never deleted.
clutter:
  [
    # Defaults
    .DS_Store, Thumbs.DB,
    # Extras
    .xml, .nfo, .lrc, .jpg, .png
  ]

# Convert all non-ASCII characters in paths to ASCII equivalents.
asciify_path: yes

lastgenre:
  auto: yes
  force: yes
  keep_existing: no
  whitelist: yes
  count: 5
  
lyrics:
  auto: yes
  force: yes
  print: no
  sources: [lrclib]
  synced: yes
  
fetchart:
  auto: yes
  high_resolution: yes
  
embedart:
  auto: yes
  remove_art_file: yes
  ifempty: no

# filetote:
#   pairing:
#     enabled: true
#     extensions: ".lrc"
#   extensions: .jpg .png